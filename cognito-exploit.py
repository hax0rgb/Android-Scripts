import os
import re
import argparse
import boto3
import sys
import subprocess
import threading
from botocore.exceptions import ClientError
import warnings
from colorama import Fore, Style
from time import sleep

warnings.filterwarnings("ignore", category=UserWarning)

def get_pool_credentials(region, identity_pool):
    client = boto3.client('cognito-identity', region_name=region)
    
    try:
        _id = client.get_id(IdentityPoolId=identity_pool)
        _id = _id['IdentityId']
    except ClientError as e:
        print(f"An error occurred: {e}")
        return

    retries = 0
    max_retries = 5  # Number of max retries
    backoff_factor = 1  # Time delay formula factor

    while retries < max_retries:
        try:
            credentials = client.get_credentials_for_identity(IdentityId=_id)
            access_key = credentials['Credentials']['AccessKeyId']
            secret_key = credentials['Credentials']['SecretKey']
            session_token = credentials['Credentials']['SessionToken']

            print(f"{Fore.MAGENTA}Starting Enumeration on AWS Cognito Pool ID:{Style.RESET_ALL}")

            script_path = "/Users/bgaurang/Android-pentest/Android-scripts/enumerate-iam/enumerate-iam.py"
            
            cmd = [f"python3", script_path, 
                   "--access-key", access_key,
                   "--secret-key", secret_key,
                   "--session-token", session_token,
                   "--region", region]

            try:
                subprocess.run(cmd, timeout=240)
            except subprocess.TimeoutExpired:
                print(f"Execution of {script_path} timed out.")

            break  # Successfully got the credentials and made the call, so break out of the loop
        except ClientError as e:
            if e.response['Error']['Code'] == 'TooManyRequestsException':
                print(f"Rate exceeded, waiting for {backoff_factor ** retries} seconds before retrying...")
                sleep(backoff_factor ** retries)
                retries += 1
            else:
                print(f"An error occurred: {e}")
                break  # break the loop if an error other than rate limit occurs

def search_files(directory, pattern):
    for root, dirs, files in os.walk(directory):
        for file in files:
            filepath = os.path.join(root, file)
            with open(filepath, 'r', errors='replace') as f:
                text = f.read()
                matches = re.findall(pattern, text)
                for match in matches:
                    region = match.split(":")[0]
                    pool_id = match
                    print(f"\n{Fore.GREEN}Found AWS Cognito Pool ID:{Style.RESET_ALL} {pool_id} in file: {Fore.YELLOW}{filepath}{Style.RESET_ALL}")
                    get_pool_credentials(region, pool_id)

def main():
    parser = argparse.ArgumentParser(description='Search for AWS Cognito Pool IDs.')
    parser.add_argument('-d', '--directory', help='Decompiled Android folder')
    parser.add_argument('-D', '--directories_folder', help='Folder containing multiple decompiled Android folders')

    args = parser.parse_args()
    single_directory = args.directory
    directories_folder = args.directories_folder

    if single_directory and directories_folder:
        print("Please provide either -d or -D, but not both.")
        sys.exit(1)

    if not single_directory and not directories_folder:
        print("Either -d or -D must be provided.")
        sys.exit(1)


    aws_pool_patterns = [
        r"ap-northeast-2:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"ap-northeast-3:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"ap-southeast-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"ap-southeast-2:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"ap-south-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"ca-central-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"ca-central-2:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"eu-west-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"eu-west-2:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"eu-west-3:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"eu-north-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"us-east-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"us-east-2:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"us-west-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"us-west-2:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
        r"sa-east-1:[0-9A-Za-z]{8}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{4}-[0-9A-Za-z]{12}",
    ]

    if single_directory:
        if not os.path.exists(single_directory):
            print("Directory not found.")
            sys.exit(1)
        for pattern in aws_pool_patterns:
            search_files(single_directory, pattern)

    elif directories_folder:
        if not os.path.exists(directories_folder):
            print("Directories folder not found.")
            sys.exit(1)
        
        # Get all sub-folders
        subfolders = [f.path for f in os.scandir(directories_folder) if f.is_dir()]

        for subfolder in subfolders:
            print(f"Processing directory: {subfolder}")
            for pattern in aws_pool_patterns:
                search_files(subfolder, pattern)

if __name__ == "__main__":
    main()
